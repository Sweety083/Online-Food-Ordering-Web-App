pipeline {
    agent any

    environment {
        DOCKER_HUB_CREDENTIALS = 'dockerhub-cred'   // Must match your Jenkins credential ID
        DOCKER_HUB_REPO = 'sweetyraj22/online-food-ordering'  // Updated Docker Hub username
        APP_NAME = 'online-food-ordering'
        K8S_NAMESPACE = 'production'
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Build & Push Docker Image') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: "${DOCKER_HUB_CREDENTIALS}", 
                    usernameVariable: 'DOCKERHUB_USER', 
                    passwordVariable: 'DOCKERHUB_PASS'
                )]) {
                    script {
                        sh '''
                            echo "Building Docker image..."
                            docker build -t $DOCKER_HUB_REPO:latest .
                            echo "Logging in to Docker Hub..."
                            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin
                            echo "Pushing Docker image..."
                            docker push $DOCKER_HUB_REPO:latest
                        '''
                    }
                }
            }
        }

        stage('Deploy to Kubernetes (Green)') {
            steps {
                script {
                    sh '''
                        echo "Applying green deployment..."
                        kubectl apply -f k8s/deployment-green.yaml -n $K8S_NAMESPACE --validate=false
                        kubectl apply -f k8s/service.yaml -n $K8S_NAMESPACE --validate=false
                    '''
                }
            }
        }

        stage('Switch Service (Blue-Green)') {
            steps {
                script {
                    sh '''
                        CURRENT_COLOR=$(kubectl get svc $APP_NAME -n $K8S_NAMESPACE -o jsonpath='{.spec.selector.color}')
                        if [ "$CURRENT_COLOR" = "blue" ]; then
                            NEW_COLOR="green"
                            OLD_COLOR="blue"
                        else
                            NEW_COLOR="blue"
                            OLD_COLOR="green"
                        fi
                        echo "Switching service from $OLD_COLOR to $NEW_COLOR"
                        kubectl patch svc $APP_NAME -n $K8S_NAMESPACE -p '{"spec":{"selector":{"app":"'$APP_NAME'","color":"'$NEW_COLOR'"}}}'
                    '''
                }
            }
        }

        stage('Clean Up Old Deployment') {
            steps {
                script {
                    sh '''
                        CURRENT_COLOR=$(kubectl get svc $APP_NAME -n $K8S_NAMESPACE -o jsonpath='{.spec.selector.color}')
                        if [ "$CURRENT_COLOR" = "blue" ]; then
                            OLD_COLOR="green"
                        else
                            OLD_COLOR="blue"
                        fi
                        echo "Deleting old deployment: $APP_NAME-$OLD_COLOR"
                        kubectl delete deployment $APP_NAME-$OLD_COLOR -n $K8S_NAMESPACE --ignore-not-found
                    '''
                }
            }
        }
    }

    post {
        success {
            echo "Pipeline completed successfully! ✅"
        }
        failure {
            echo "Pipeline failed. ❌ Check logs for details."
        }
    }
}
